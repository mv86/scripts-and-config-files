" TODO Make ~/.vim/tmp/ dir on new machine & install ripgrep

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'jnurmine/Zenburn'
Plug 'airblade/vim-gitgutter'
Plug 'justinmk/vim-sneak'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'maralla/completor.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'itchyny/lightline.vim'
Plug 'itchyny/vim-gitbranch'  " adds current git branch to lightline
Plug 'w0rp/ale'
Plug 'jremmen/vim-ripgrep'
Plug 'Vimjas/vim-python-pep8-indent'

call plug#end()

colorscheme zenburn

" Save backup and swap files to .vim/tmp/ directory
set backupdir^=$HOME/.vim/tmp//
set directory^=$HOME/.vim/tmp//
set undodir^=$HOME/.vim/tmp//

set expandtab           " tabs are spaces
set number              " show line numbers
" set relativenumber      " Show relative line numbers
set showcmd             " show command in bottom bar
set cursorline          " highlight current line
set showmatch           " highlight matching [{()}]
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set splitbelow          " :sp puts new screen below
set splitright          " :vs puts new screen to the right
set fileformat=unix     " avoid conversion issues when sharing
set encoding=utf-8      " standadise to utf-8
set updatetime=100      " Update gitgutter etc more regularly

" Remove trailing whitespace with <F5>
:nnoremap <silent> <F5> :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>


" lightline status bar settings
let g:lightline = {
        \ 'colorscheme': 'jellybeans',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
        \ },
        \ 'component_function': {
        \        'gitbranch': 'gitbranch#name'
        \ },
        \ }
set laststatus=2
set noshowmode          " hide as using lightline status bar


" vim-multiple-cursors setting
let g:multi_cursor_skip_key = '<C-m>'


" ALE setting
let g:ale_sign_column_always = 1


" completor settings
" For completor syntax completion. Will need to install more if needed
let g:completor_python_binary = '/usr/bin/python3'

" Use TAB to complete when typing words, else inserts TABs as usual.  Uses
" dictionary, source files, and completor to find matching words to complete.

" Note: usual completion is on <C-n> but more trouble to press all the time.
" Never type the same word twice and maybe learn a new spellings!
" Use the Linux dictionary when spelling is in doubt.
function! Tab_Or_Complete() abort
  " If completor is already open the `tab` cycles through suggested completions.
  if pumvisible()
    return "\<C-N>"
  " If completor is not open and we are in the middle of typing a word then
  " `tab` opens completor menu.
  elseif col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
    return "\<C-R>=completor#do('complete')\<CR>"
  else
    " If we aren't typing a word and we press `tab` simply do the normal `tab`
    " action.
    return "\<Tab>"
  endif
endfunction

" Use `tab` key to select completions.  Default is arrow keys.
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"


" Enable folding (za to fold)
set foldmethod=indent
set foldlevel=99

" split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" goes without saying
inoremap jj <esc>

" improves % matching
runtime macros/matchit.vim

" remap leader key to space
let mapleader = "\<space>"

" fzf (fuzzy find) shortcuts
nnoremap <leader>f :Files<CR>
nnoremap <leader>l :Lines<CR>
nnoremap <leader>g :GFiles<CR>


" PYTHON Specific
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=99 |


" JS, HTML, CSS Specific
au BufNewFile,BufRead *.js, *.html, *.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |


" NOTES
" :set rnu    " toggle relative numbering on
" :set rnu!   " toggle relative numbering off
" :set noh    " turn off highlighting till next search
" set clipboard=unnamed   " enable d/y etc to go to system clipboard (affects other registers)


" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78
else
  set autoindent		" always set autoindenting on
endif " has("autocmd")


" Test key mappings

" Ctrl-u makes word upper case
:inoremap <c-u> <esc>viwUwi
